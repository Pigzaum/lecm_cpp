/*
 * File: lecm.hpp
 * Author: Guilherme O. Chagas
 *
 * @brief Header of the Local Expansion and Conductance Minimizing (LECM) [1].
 *
 * (I'm sorry for my bad english xD)
 *
 * Created on May 14, 2018, 03:37 PM
 * 
 * References:
 * [1] Y. Gao, H. Zhang and Y. Zhang. Overlapping community detection based on 
 * conductance optimization in large-scale networks, Physica A 522 (2019), 
 * p. 69-79.
 * [2] Y. Gao, H. Zhang and Y. Zhang. A Fast and high quality approach for 
 * overlapping community detection through minimizing conductance. In: IEEE 
 * First International Conference on Data Science in Cyberspace, Changsha, China
 * (2016) p. 688-693.
 * [3] R. Andersen, F. Chung and K. Lang. Local Graph Partitioning using 
 * PageRank Vectors. In: Proceedings of the 47th Annual IEEE Symposium on 
 * Foundations of Computer Science. Berkeley, CA, USA: IEEE, 2006.
 */

#ifndef LECM_HPP
#define LECM_HPP

#include "./clustering.hpp"
#include "./lecm_parameters.hpp"

class Lecm
{
public:

    /**
    * @brief Disabled default constructor.
    */
    Lecm() = delete;

    /**
     * Disabled copy constructor.
     */
    Lecm(const Lecm &other) = delete;

    /**
    * Default move constructor.
    */
    Lecm(Lecm &&other) = delete;

    /**
    * Disabled assignment operator.
    */
    Lecm& operator=(const Lecm &other) = delete;

    /**
    * Default move assignment operator.
    */
    Lecm& operator=(Lecm &&other) = delete;

    /**
     * @brief
    */
    Lecm(const Lecm_parameters &p, const Graph &g);

    /**
     * @brief
    */
    ~Lecm();

    /**
     * @brief
    */
    void execute();

    /**
     * @brief
    */
    void write_clustering() const;

private:

    /**
     * @brief
    */
    const Lecm_parameters m_p;

    /**
     * @brief
    */
    const Graph &m_graph;

    /**
     * @brief
    */
    bool m_executed;

    /**
     * @brief
    */
    double m_execution_time_s;

    /**
     * @brief Clustering generated by LECM.
    */
    Clustering m_clusters;

    /**
     * @brief
     * @param
     * @return
    */
    void combine_communities();

    /**
     * @brief Combining function (see [1])
     * @param
     * @param
     * @return
    */
    double cs(const unsigned int c_i, const unsigned int c_j) const;

    /**
     * @brief
     * @param
     * @return
    */
    void community_refinement();

    /**
     * @brief
     * @param
    */
    void find_communities_for_outliers();

    /**
     * @brief
     * @param
     * @return
    */
    void node_movement();

    /**
     * @brief Personalized Pagerank algorithm [3].
     * @param unsigned int:.
     * @param unsigned int:.
     * @return Cluster: cluster found for the input seed.
    */
    std::unordered_map<unsigned int, double> 
        ppr(const std::vector<unsigned int> &seed) const;

    /**
     * @brief
     * @param
     * @return
    */
    void seed_expansion(const std::vector<std::vector<unsigned int>> &seeds);

    /**
     * @brief
     * @param
     * @return
    */
    void seed_expansion_thread_task(
        const std::vector<std::vector<unsigned int>> &seeds,
        const unsigned int thread_id);

    /**
     * @brief First phase of LECM algorithm, the seeding step.
     * @return std::vector<std::vector<unsigned int>> seed set.
    */
    std::vector<std::vector<unsigned int>> seeding() const;

};

#endif /* LECM_HPP */